@use "sass:math";
@use "../functions" as *;
@use "./breakpoints" as *;

/* SPACING HIERACHY SYSTEM ******************************/

// The base spacing value
$base-space: 1rem;

// The spacing increment coefficient
$spacing-inc-coeff: 0.25;

// The total number of spacing units
$spacings-count: 24;

// The spacings values
$spacings: [];

@for $i from 1 through $spacings-count {
  $space: $base-space * $spacing-inc-coeff * $i;
  $spacings: append($spacings, $space);
}

// Getter for the spacings values
@function getSpacing($i) {
  @return nth($spacings, $i);
}

/* ***************************************************** */

/* CONTAINER LAYOUT ************************************ */

// Padding on the horizontal sides of the container layout
$container-padding-x: pxToRem(24);

// Paddings on the horizontal sides for each screen breakpoint
$container-paddings: (
  "sm": pxToRem(24),
  "md": pxToRem(32),
  "lg": pxToRem(36),
  "xlg": pxToRem(40),
);

// Getter for the container's padding
@function getContainerPadding($bp) {
  @return map-get($container-paddings, $bp);
}

// Calculates the total container max-width from the inner content's max-width and the horizontal padding
@function calcContainerMaxWidthFromInnerAndPadding($inner-max-width, $padding) {
  @return calc(#{pxToRem($inner-max-width)} + #{$padding} * 2);
} 

// Container layout max-width for each screen breakpoint
$container-max-widths: (
  "sm": pxToRem(634),
  "md": calcContainerMaxWidthFromInnerAndPadding(880, getContainerPadding("md")),
  "lg": pxToRem(1096),
  "xlg": calcContainerMaxWidthFromInnerAndPadding(1112, getContainerPadding("xlg")),
);

// Getter for the container's max-width
@function getContainerMaxWidth($bp) {
  @return map-get($container-max-widths, $bp);
}

/* ***************************************************** */